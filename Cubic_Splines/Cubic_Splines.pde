CubicCurve curve;

void setup()
{
    // size(1000, 600);

    Matrix matrix1 = new Matrix(new double[][] {{0.862068, 0.140997, 0.146513, 0.580203, 0.932976, 0.608834, 0.748809, 0.781399, 0.489892, 0.938934, 0.560718, 0.641739, 0.81555, 0.0755066, 0.312929, 0.256552, 0.252321, 0.176685, 0.196987, 0.7432}, {0.275859, 0.515675, 0.136552, 0.711527, 0.853811, 0.149161, 0.98294, 0.251162, 0.290105, 0.316072, 0.748484, 0.953019, 0.0274881, 0.830519, 0.825801, 0.569614, 0.131798, 0.85405, 0.8098, 0.75173}, {0.880184, 0.334272, 0.225498, 0.408884, 0.295474, 0.425531, 0.632136, 0.490237, 0.757379, 0.457976, 0.494203, 0.139652, 0.466996, 0.766783, 0.424288, 0.337774, 0.354888, 0.128058, 0.514199, 0.473148}, {0.558424, 0.583226, 0.414015, 0.79056, 0.228096, 0.153549, 0.789848, 0.345352, 0.643575, 0.991551, 0.367059, 0.257715, 0.437497, 0.00937138, 0.0561052, 0.528749, 0.502476, 0.61108, 0.145101, 0.763546}, {0.523281, 0.616872, 0.101038, 0.926987, 0.254568, 0.51189, 0.436501, 0.160871, 0.755634, 0.0791407, 0.869609, 0.484876, 0.111718, 0.811882, 0.145531, 0.718457, 0.500032, 0.276917, 0.459198, 0.559429}, {0.569392, 0.628553, 0.00295441, 0.687598, 0.821576, 0.0615668, 0.540591, 0.690042, 0.140217, 0.501296, 0.498544, 0.426165, 0.0590907, 0.342479, 0.589623, 0.0760755, 0.386348, 0.974354, 0.383608, 0.87786}, {0.190769, 0.53631, 0.447618, 0.287928, 0.57005, 0.432621, 0.989417, 0.90724, 0.782455, 0.987438, 0.696345, 0.155724, 0.788799, 0.382598, 0.143928, 0.752623, 0.602503, 0.382151, 0.088768, 0.118998}, {0.945371, 0.912145, 0.251965, 0.111476, 0.465062, 0.361275, 0.322162, 0.388737, 0.52161, 0.0589717, 0.231447, 0.885318, 0.373555, 0.153067, 0.130731, 0.357542, 0.017593, 0.581867, 0.138791, 0.804603}, {0.464515, 0.180991, 0.788358, 0.886823, 0.529291, 0.271176, 0.894638, 0.842055, 0.863894, 0.274789, 0.628118, 0.75632, 0.0716657, 0.069366, 0.569315, 0.69302, 0.310648, 0.0802083, 0.808373, 0.824147}, {0.144412, 0.983281, 0.439821, 0.386066, 0.880561, 0.575484, 0.0925248, 0.681702, 0.671372, 0.976448, 0.544459, 0.405688, 0.130537, 0.298772, 0.285592, 0.417691, 0.108907, 0.174017, 0.539037, 0.00375639}, {0.758045, 0.800289, 0.736357, 0.678329, 0.355604, 0.189476, 0.0434301, 0.756382, 0.857999, 0.142915, 0.456812, 0.537016, 0.618238, 0.713934, 0.00738837, 0.0899287, 0.573945, 0.723012, 0.0198585, 0.77008}, {0.755591, 0.264127, 0.819488, 0.3279, 0.710908, 0.378006, 0.898717, 0.200793, 0.424294, 0.00359236, 0.73409, 0.0177039, 0.130571, 0.804449, 0.976904, 0.496367, 0.933073, 0.994954, 0.47205, 0.896993}, {0.440822, 0.33693, 0.25357, 0.675669, 0.406086, 0.403659, 0.313629, 0.838372, 0.370083, 0.428774, 0.343124, 0.906436, 0.187942, 0.655493, 0.681273, 0.18752, 0.437697, 0.657513, 0.620875, 0.492213}, {0.326204, 0.425182, 0.992588, 0.510198, 0.0903093, 0.672903, 0.18592, 0.930575, 0.424986, 0.595373, 0.535583, 0.478141, 0.622335, 0.810787, 0.765788, 0.16031, 0.769753, 0.996096, 0.847682, 0.32041}, {0.30527, 0.743297, 0.0852914, 0.718486, 0.190546, 0.913184, 0.903453, 0.879191, 0.591917, 0.938123, 0.99516, 0.377244, 0.367853, 0.753113, 0.264581, 0.517575, 0.306261, 0.356003, 0.525032, 0.710577}, {0.848087, 0.422814, 0.628976, 0.401241, 0.628491, 0.667351, 0.719466, 0.962979, 0.361063, 0.832119, 0.35937, 0.200974, 0.108037, 0.774171, 0.928957, 0.823252, 0.32082, 0.334964, 0.219019, 0.00735005}, {0.442252, 0.341964, 0.394321, 0.293652, 0.520459, 0.869691, 0.15133, 0.73527, 0.515687, 0.502402, 0.288373, 0.347607, 0.311995, 0.529904, 0.816573, 0.188781, 0.312616, 0.680122, 0.639766, 0.0833203}, {0.973706, 0.0373587, 0.466731, 0.0828926, 0.472184, 0.987431, 0.16754, 0.856014, 0.340727, 0.386876, 0.485148, 0.220081, 0.906602, 0.0161031, 0.185473, 0.933562, 0.505189, 0.536498, 0.141305, 0.724854}, {0.516942, 0.842165, 0.22808, 0.21586, 0.185322, 0.63588, 0.916607, 0.862778, 0.827497, 0.259888, 0.179939, 0.758748, 0.548411, 0.425861, 0.657759, 0.392241, 0.664318, 0.491764, 0.960746, 0.707128}, {0.367131, 0.0444003, 0.689087, 0.97141, 0.516608, 0.834441, 0.981974, 0.444672, 0.0189714, 0.265917, 0.175586, 0.103657, 0.973887, 0.212438, 0.771023, 0.944729, 0.466485, 0.422034, 0.899616, 0.600494}});
    // Matrix A = new Matrix(new double[][] {{1, 2, 1, 6}, {4, 3, -1, 24}, {7, 5, 3, 14}, {1, 5, 2, 4}});
    Matrix B = new Matrix(new double[][] {{0.435115}, {0.152692}, {0.307384}, {0.288467}, {0.144466}, {0.158478}, {0.823421}, {0.365585}, {0.676132}, {0.682479}, {0.834133}, {0.429147}, {0.236988}, {0.0952565}, {0.313768}, {0.941524}, {0.759782}, {0.833703}, {0.207646}, {0.7461}});

    // println(millis());
    // println(matrix1.determinant());
    // println(millis());

    println(millis());
    MatrixSystem system = new MatrixSystem(matrix1, B);
    system.calculateLUP();
    system.calculateZ();
    system.calculateX();
    println(system.solve());
    println(millis());

    
    // system.L.printMatrix(2);
    // system.U.printMatrix(2);
    // system.P.printMatrix(2);
    // mult(mult(system.P, system.L), system.U).printMatrix(4);
    // mult(system.P, A).printMatrix(4);
    // system.solveMatrix().printMatrix();

    // matrix1.printMatrix();
    // matrix2.printMatrix();

    // mult(matrix1, matrix2).printMatrix();
    // println(matrix2.determinant());
    // println(millis());
    // mult(inverse(A), A).printMatrix(4);
    // println(millis());
    // double[][][] matrices = decomposeLUP(A);
    // printMatrix(matrices[0], 2);
    // printMatrix(matrices[1], 2);
    // printMatrix(matrices[2], 2);
    // // printMatrix(matrices[2], 3);

    // Matrix L = new Matrix(matrices[0]);
    // Matrix U = new Matrix(matrices[1]);
    // Matrix P = new Matrix(matrices[2]);

    // mult(L, U).printMatrix(2);
    // mult(P, A).printMatrix(2);
    // A.transpose();
    // A.printMatrix(3);

    // println();

    // println(LUPSolve(A, B));

    // curve = new CubicCurve(0, 1, 0, 0, -width / 2, width / 2);
}

void draw()
{
    // pushMatrix();
    // translate(width / 2, height / 2);
    // curve.draw(color(0));
    // popMatrix();
}

void printMatrix(double[][] numbers, int decimalPlaces)
{
    for(int i = 0; i < numbers.length; i++)
    {
        for(int j = 0; j < numbers[i].length; j++)
        {
            print(String.format("% ." + decimalPlaces + "f ", numbers[i][j]));
        }
        println();
    }
    println();
}